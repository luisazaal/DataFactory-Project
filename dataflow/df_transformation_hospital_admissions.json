{
	"name": "df_transformation_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_dw_hospital_admission",
						"type": "DatasetReference"
					},
					"name": "SourceRaw"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_country",
						"type": "DatasetReference"
					},
					"name": "SourceDimCountry"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_time",
						"type": "DatasetReference"
					},
					"name": "SourceDimTime"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admission_daily",
						"type": "DatasetReference"
					},
					"name": "SinkDaily"
				},
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admission_weekly",
						"type": "DatasetReference"
					},
					"name": "SinkWeekly"
				}
			],
			"transformations": [
				{
					"name": "SelectColumns"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "SelectLookupResults"
				},
				{
					"name": "SplitDailyWeekly"
				},
				{
					"name": "AggregateDimDate"
				},
				{
					"name": "JoinWithDate"
				},
				{
					"name": "DerivedECDCYearWeek"
				},
				{
					"name": "PivotWeekly"
				},
				{
					"name": "PivotDaily"
				},
				{
					"name": "SortWeekly"
				},
				{
					"name": "SortDaily"
				},
				{
					"name": "SelectWeekly"
				},
				{
					"name": "SelectDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceRaw",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceDimCountry",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> SourceDimTime",
				"SourceRaw select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectColumns, SourceDimCountry lookup(SelectColumns@country == SourceDimCountry@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          country = SelectColumns@country,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          country = SourceDimCountry@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectLookupResults",
				"SelectLookupResults split(indicator == 'Weekly new hospital admissions per 100k' || indicator == 'Weekly new ICU admissions per 100k',",
				"     disjoint: false,",
				"     partitionBy('hash', 1)) ~> SplitDailyWeekly@(Weekly, Daily)",
				"DerivedECDCYearWeek aggregate(groupBy(ecdc_year_week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggregateDimDate",
				"SplitDailyWeekly@Weekly, AggregateDimDate join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> JoinWithDate",
				"SourceDimTime derive(ecdc_year_week = year+'-W'+lpad(week_of_year, 2, '0')) ~> DerivedECDCYearWeek",
				"JoinWithDate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          week_start_date,",
				"          week_end_date,",
				"          source),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true,",
				"     partitionBy('hash', 1)) ~> PivotWeekly",
				"SplitDailyWeekly@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: true,",
				"     partitionBy('hash', 1)) ~> PivotDaily",
				"PivotWeekly sort(desc(reported_year_week, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> SortWeekly",
				"PivotDaily sort(desc(reported_date, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> SortDaily",
				"SortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          new_hospital_occupancy_count = {Weekly new hospital admissions per 100k_count},",
				"          new_icu_occupancy_count = {Weekly new ICU admissions per 100k_count},",
				"          source",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWeekly",
				"SortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          hospital_occupancy_count = {count_Daily hospital occupancy},",
				"          icu_occupancy_count = {count_Daily ICU occupancy},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDaily",
				"SelectDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     filePattern:'hospital_admission_daily',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkDaily",
				"SelectWeekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     filePattern:'hospital_admission_weekly',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkWeekly"
			]
		}
	}
}